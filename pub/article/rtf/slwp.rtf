{\rtf1\ansi\uc1\deff0\deflang1024
{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}
{\f1\fnil\fcharset0 Arial;}
{\f2\fnil\fcharset0 Arial;}
{\f3\fnil\fcharset0 Courier New;}
{\f4\fnil\fcharset0 Zapf Chancery;}
{\f5\fnil\fcharset0 STIXGeneral;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
}
{\stylesheet
{\s0\qj\widctlpar\f0\fs20 \snext0 Normal;}
{\cs10 \additive\ssemihidden Default Paragraph Font;}
{\s1\qc\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 Part;}
{\s2\ql\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 heading 1;}
{\s3\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 2;}
{\s4\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 4;}
{\s6\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 5;}
{\s7\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 6;}
{\s8\qr\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext8 rightpar;}
{\s9\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext9 centerpar;}
{\s10\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext10 leftpar;}
{\s11\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equation;}
{\s12\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationNum;}
{\s13\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlign;}
{\s14\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlignNum;}
{\s15\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArray;}
{\s16\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArrayNum;}
{\s17\ql\sb120\sa120\keep\widctlpar\f0\fs20 \sbasedon0\snext0 theorem;}
{\s18\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 bitmapCenter;}
{\s20\qc\sb240\sa240\b\f0\fs36 \sbasedon0\snext21 Title;}
{\s21\qc\sa120\f0\fs20 \sbasedon0\snext0 author;}
{\s22\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext22 footer;}
{\s23\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext23 header;}
{\s30\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 caption;}
{\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext0 Figure;}
{\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext32 Table;}
{\s33\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext33 Tabular;}
{\s34\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext34 Tabbing;}
{\s35\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext35 Quote;}
{\s38\ql\widctlpar\f3\fs20 \snext38 verbatim;}
{\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext46 List;}
{\s47\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext47 List 1;}
{\s50\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 latex picture;}
{\s51\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 subfigure;}
{\s61\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext62 bibheading;}
{\s62\ql\fi-567\li567\sb0\sa0\f0\fs20 \sbasedon0\snext62 bibitem;}
{\s64\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext64 endnotes;}
{\s65\ql\fi-113\li397\lin397\f0\fs20 \sbasedon0\snext65 footnote text;}
{\s66\qj\fi-170\li454\lin454\f0\fs20 \sbasedon0\snext66 endnote text;}
{\cs62\super \additive\sbasedon10 footnote reference;}
{\cs63\super \additive\sbasedon10 endnote reference;}
{\s67\ql\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext67 acronym;}
{\s70\qc\sa120\b\f0\fs20 \sbasedon0\snext71 abstract title;}
{\s71\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext0 abstract;}
{\s80\ql\sb240\sa120\keepn\f0\b\fs20 \sbasedon0\snext0 contents_heading;}
{\s81\ql\li425\tqr\tldot\tx8222\sb240\sa60\keepn\f0\fs20\b \sbasedon0\snext82 toc 1;}
{\s82\ql\li512\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext83 toc 2;}
{\s83\ql\li1024\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext84 toc 3;}
{\s84\ql\li1536\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext85 toc 4;}
{\s85\ql\li2048\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 5;}
{\s86\ql\li2560\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 6;}
}
{\info
{\title Original file was slwp.tex}
{\doccomm Created using latex2rtf 2.3.5 r1236 (released Jan 17 2014) on Mon Feb 24 19:32:20 2014
}
}
{\footer\pard\plain\tqc\tx3698\tqr\tx7397 \tab
Confidential \emdash  Intellectual property of T.M.C. Ruiter, \fs24 {\f2 \i X\expnd-2\expndtw-2 {\expnd-6\expndtw-6 {R\expnd2\expndtw2 {}}}}\fs20  \emdash  Version 6\par}
{\header\pard\plain\tqc\tx3698\tqr\tx7397 {}{\b }\tab
\tab
{}{\b \chpgn }\par}
\paperw11960\paperh16900\facingp\margl2500\margr2063\margt2520\margb1820\pgnstart0\widowctrl\qj\ftnbj\f0\aftnnar
{\pard\plain\s20\qc\sb240\sa240\b\f0\fs36\sl240\slmult1 \fi0 Secure Login without Passwords\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 T.M.C. Ruiter, {\f2 \i X\expnd-2\expndtw-2 {\expnd-6\expndtw-6 {R\expnd-40\expndtw-40 {}}}}\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 \chdate \par
{\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi300 Any person can invent a security system so clever that he or she can\rquote t imagine a way of breaking it. \par
}{\pard\plain\s70\qc\sa120\b\f0\fs20\sl240\slmult1 \sb60 \fi300 Abstract\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li1024\ri1024\fi300  These are the ingredients for secure logins: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
For login purposes, the webserver uses a separate login server. This server can be internal (in the back-office) or external (somewhere on the Internet). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
The login server maintains a small array with Secret keys in an HSM, which will be renewed regularly (oldest key removed, all keys shifted one position, new key added). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
All cryptographic operations for the login procedure are performed by the login server and take place inside the HSM; no values are remembered afterwards, except Secret keys. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
For each user, a random number acts as the site key for that user. The user gets a different value, which is the {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} encryption of the site key for that user with the newest Secret key. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
Logging in is a process of proving that both the website and the user have the right key by sending {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hashes of random numbers encrypted with these keys. Neither the site key nor the user key are ever sent over the line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
When Secret keys are changed, the user automatically gets a new key. This way, user keys are changed regularly as well. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
All user keys are put on a keyring, which is a set of at least 99 keys, most of them dummies. No other information whatsoever is stored in a keyring, which may be stored in an encrypted file. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
The user selects which key is used for what, which it needs to write down or remember. Although keys themselves are changed regularly, the key number and its purpose will never change during the lifetime of the keyring, which might be forever. This makes remembering key numbers, at least for those keys that are used regularly, doable for most people. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1624\ri1024\fi-300 \bullet\tab
The keyring itself is something you must have; the key number something you must know, so logging in using a keyring is a basic form of two-factor authentication. \par
}}\column
\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs20\sl240\slmult1 \sb180 \fi0  Contents\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
{\field{\*\fldinst TOC \\o "1-3" }{\fldrslt }}
\page
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 1  Introduction\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Passwords should be kept in memory\emdash human memory, that is\emdash at all times. This article is about passwords for websites; the passwords many people use on a day to day basis. Passwords are an archaic type of security measure (
[{\field{\*\fldinst{\lang1024 REF BIB_Honan2012 \\* MERGEFORMAT }}{\fldrslt{2}}}
]), compared to the scheme proposed here.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 1.1  On human behavior\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The rationale amongst security experts is that passwords should not be written down. Ever. And passwords should be unique for each and every website. Oh, and\emdash I almost forgot\emdash you have to change them as well. Each month or so will do nicely. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Yeah, right!  I cannot remember all different passwords I am forced to use, although my memory is quite good. I {\i have} to write them down, otherwise, I am lost. (Fortunately, I have some support for this 
[{\field{\*\fldinst{\lang1024 REF BIB_Schneier_2005 \\* MERGEFORMAT }}{\fldrslt{3}}}
].) Therefore, I resort to a little black booklet, with all my account information. I don\rquote t remember passwords any more, I remember where my booklet is. And I confess that I am compelled to reuse passwords, and to keep the ones I am not forced to change, so I can actually remember some of them. So I believe nothing has fundamentally changed in more than 14 years\u8230?
[{\field{\*\fldinst{\lang1024 REF BIB_Adams_1999_UE_322796_322806 \\* MERGEFORMAT }}{\fldrslt{1}}}
] \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 I have given up on inventing a scheme for passwords that differ from each other, can be changed individually at different times, and are easy to remember, as not to be forced to write them down. I believe no such scheme exists, because websites have different requirements regarding passwords. To see what I mean, watch 
[{\field{\*\fldinst{\lang1024 REF BIB_youtube_tobyturner \\* MERGEFORMAT }}{\fldrslt{4}}}
]. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For the user, the bad thing with passwords is that you have to keep track of it all. Remembering difficult passwords is cumbersome for most, and impossible for some. Tracking things infalliably, and remembering different passwords for each and every site is not something people excel at.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 1.2  A new login approach\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Using a key, with up to 128 random bits, to gain access to a website is far more secure than letting people decide which password they would like to use to do so. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 This proposed new way of logging in has several advantages over the current practice of websites requiring passwords. Instead of having to remember dozens of passwords for numerous sites, you only need to remember a key number for that site, in the range of 1 to 99. This key number stays the same for that website at all times, so you {\i can} remember it.  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2  Login for dummies\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Not that you are one if you decide to read this section. It serves as a general description of the login process, without going into technical details too much.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.1  A new login scheme\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Userids tend to be in short supply for people with first names like John, Peter, and Chris, or surnames like Jones or Smith. This is true for people in almost any country. And the larger the site, the rarer free userids. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Passwords tend to be weak, as people choose short, real-life words, like things or names. Not that people are not willing, but remembering too long, too difficult passwords is not easy. It is very frustrating when you cannot login because you have forgotten your password, or, just when you are starting to remember it, you need to change it again. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 As a radical measure, we do away with all this!  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Instead of userids, the website holds hashes based on keyring identifiers. Instead of a password for an account, the website holds one part of a key, of which you have the other part, like the broken locket Annie clings to in the musical that bears her name. Your key is different from the key the website has, but they are related to each other. It is not possible to login with the key that is stored on the website; you can only login with your personal key, which is verified with the key from the website. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We will let the computers (yours, the one running the website, and another one dedicated for logins) do what they do best: compute. Give them some random bits to chew on, and they are in heaven. We will let humans (you, your neighbor and your fellow earthlings) do what they do best: remembering small ordinal numbers.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.2  Storing your keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Keys are just long strings of random bits with no information whatsoever. Your keys are personal and are stored locally. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Imagine a keyring, not unlike your own keyring on which you have keys for your car, your house, shed, or locker. This keyring has a label and 99 keys on it, numbered 1 through 99. Instead of brass or steel, these keys are made of 128 random bits each. The label is another 128 bits long, and as random as possible, like the keys. Instead of being on a steel ring, these keys, with the keyring label, are written to a file on disk; a blob of 100 strings of 128 bits. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The use of keys on this keyring is not entirely different from using real physical keys. The bits in a key are comparable with the tooths or holes of a physical key you use to unlock your home. You do not need to remember exactly how far the tooths need to protrude or exactly where and how deep the holes in your key need to be, to be able to unlock the door; you just select the right key (the whole physical thing at once, with all the right tooths or holes) by recognising its form or its label.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.3  Computers and links\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This proposed way of logging in concentrates on computing values and communication of the results. It is therefore appropriate at this point to elaborate a bit on who is communicating with whom and why. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.3.1  Computer roles\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Four computer roles can be distinguished when logging in. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b Webserver} This is the front-end server to which the user is communicating. From our point of view, it is the central system, acting as a hub. It communicates with three other servers: the accounts server, the login server, and of course the client computer. We consider it the most vulnerable to \lquote visits\rquote  with malicious intent, so it has been appointed the most simplests of tasks. It does not compute anything remotely valuable, it just compares values provided by others. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b Accounts server} This server is typically located in a network only accessible by the webserver. It stores all kind of user related account data, but no userid or passwords; it stores hashes and site keys instead. Like the webserver it does not compute anything either. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b Login server} This server uses an HSM which stores an array of secret keys per website it services. This server computes nothing on its own, it lets the HSM do all the work secretly, using some of its finest cryptographic functions. It receives login requests from the webserver and returns values that the webserver can compare or relay. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b Client computer} With this device the user communicates with the webserver. It generates random numbers and uses {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} to compute the values exchanged with the webserver. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 These roles can be played by as many computers as there are roles, but that need not always be the case. In fact, each and every role may be combined; a single computer may perform them all, for that matter. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The accounts server and the login server may be combined in a single server in the back-office. The webserver and the accounts server may be combined, with the login server somewhere on the Internet. The combination of webserver, accounts server, and login server is also valid; although this concentration of roles is not highly preferred. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.3.2  Secure links\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Traditionally, the communication channel between the user and the webserver is secured by means of TLS. The user sees the URL that starts with \ldblquote https://\rdblquote , which means that the webserver has authenticated itself using a digital certificate. The browser will validate the supplied certificate using other trusted certificates. This security measure is sufficient but required. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The communication between the webserver and the accounts server should be conducted over a secure channel as well. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Finally, the communication between the webserver and the login server needs to be encrypted. For this, TLS is a sufficient security measure, although in this case mutual authentication is a must. The webserver needs to know it is talking to a legitimate and trusted login server, and the login server needs to know it is receiving valid requests. The certificate of the websever is used to select which array of secret keys to use, as the login server may service more than one webserver. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.4  Logging in\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 2.4.1  Part I\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Before starting the login process you select a key from your keyring; the one you know to belong to the website you are trying to login to. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To login you don\rquote t send your key to the server but generate a secret random value, which you encrypt with your key using a simple {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} operation. Your key is totally random and the secret random value you encrypt with it is also, well\u8230?totally random. Mixing these random bits gives another totally random value. The website will receive this value and will try to decrypt this with the key that belongs to your account (we will keep you in the dark for now, about how this works). When it has decrypted the random login value, it will know which secret random value you generated. Instead of telling you the secret random number, the website sends a hash value of it, because otherwise someone able to see the network traffic will instantly know your key. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If the website returns a hash value matching your secret random number, you know two things. First, you know that the website you are talking to can successfully decrypt your random value. It can only do this if it has a matching key. Second, you know you are talking to the same site that sent you your key when you applied for an account. This implies that if you trusted that site then, you can trust this site now, as it can only be the same site.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.4.2  Part II\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is all great and very sophisticated, but the website wouldn\rquote t dare share your wonder about this, as you may well fake your enthusiasm, and flatly lie about the correctness of the hash it has sent you. To see if your claims hold, the website will do the same as you and send you an encrypted secret random value. This cryptogram can only be decrypted by someone owning the right key for the account. Using {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} with the key you have originally selected from your keyring, you decrypt it. Then, using {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} again, you combine the two random values you now have, and return this value to the website. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 When the website receives a value matching its secret random number, it knows two things. First, the user on the other side can successfully decrypt the secret random number. It can only do this if it has a matching key. Second, the website knows that this key is from the same keyring that was used when applying for an account. This implies that if you trusted this user then, you can trust this user now, as it can only be the same user.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.5  Keys\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 2.5.1  On site keys and user keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Beware, the icky parts start here (a bit). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 When applying for an account, a site key is created by a random generator. The user key is then computed as the encryption of the site key with a Secret Key, with a block cypher like {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 When the user encrypts its secret random value with its key, it uses {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
}. This is a very simple and reversable encryption method. But as both key and value are utterly random, no information is stored in the encrypted value. The website needs to decrypt the value, and this can only be done with the user key. But the website does not store user keys, only site keys\u8230? \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The solution to this may be a bit of a dissappointment and a cheat: the user key is temporarily regenerated by encrypting it again with the Secret Key. Once the user key is available, the random value can easily be decrypted by {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
}-ing it. Also, the cryptogram that is sent to the user is a random value {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
}-red with this regenereated user key. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The clever part, however, is that all the crpytographic functions the website is required to perform take place inside a Hardware Security Module, or HSM for short. Secret Keys can be put in the HSM and made to good use there, but can never be retrieved from it. The HSM computes all values needed for the login process, without ever revealing the keys that are used, not even to a hacker with full control of the HSM. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In the end, only random bits enter the HSM, and only random bits leave it.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.5.2  Key lifetime\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Every key has its lifetime, so Secret Keys need changing every so often, as a good security measure. The same goes for keys on the user\rquote s keyring. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The login protocol is capable of changing keys on the website and keys on the keyring, without any effort on the user side. Well\u8230?, a little program will do it for you, without you noticing. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Logins can be granted, but new keys may not be, which results in the expiration of an account. A website may deny a user new keys when payment is due, giving users limited login rights. At any time new keys can be provided again. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb569 \fi0 To learn how this all works, how keys are used, what a website can do with logins, and more, can all be read in the next chapters.  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 3  Keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The keys used in this login scheme do not all have the same length. The Secret keys have 256 bits, for instance. The {{\f3 {\i R}{\i S}{\i A}}} operations use keys of 2048 bits. Keys stored in a keyring have 128 bits, but fewer bits may actually be used. The number of bits in such a key may differ among websites, and is denoted in this article as value {{\i n}}. See {\field{\*\fldinst{\lang1024 REF BMsec_key_length \\* MERGEFORMAT }}{\fldrslt{3.5}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_key_length \\p }}{\fldrslt{sec_key_length}}} for a discussion of key lengths. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Three sort of keys are used: user keys (on a keyring), site keys (in a database), and Secret keys (in an array in an HSM). A user key is the result of encrypting the site key for that user with a Secret key.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_secret_keys}3.1{\*\bkmkend BMsec_secret_keys}  Secret keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The keys used to encrypt other keys\emdash called Secret keys in this article\emdash are used to perform {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} encryptions of site keys to get user keys, and are 256 bits long. They reside in the HSM of a login server. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.1.1  Array of Secret keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 For enhanced security, Secret keys need to be replaced at regular intervals. This change of keys is initiated by the website, without the possibility to make individual arrangements with any of its users. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If there were only one Secret key, changing it would render all user keys permanently useless. Therefore, an array of Secret keys needs to be kept (with room for at least one old Secret key), allowing users to login using an old(er) key. Several Secret keys are used this way and are considered to be stored in array {{\i S}}, in this article. {\par
\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0  {\par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx843\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1035\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1692\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4393\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5050\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7008
{\pard\intbl\qc { 1}\cell}
{\pard\intbl\qc {2}\cell}
{\pard\intbl\qc {\u8230?}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f3 {\i M}{\i A}{\i X}_{\i A}{\i C}{\i T}{\i I}{\i V}{\i E}_{\i K}{\i E}{\i Y}{\i S}}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {\u8230?}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f3 {\i M}{\i A}{\i X}_{\i K}{\i E}{\i Y}{\i S}}}}{\fldrslt }}
}}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 With this array, three values are defined. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
The number of stored Secret keys is represented by {{\i m}}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
The constant{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Although declared a constant, the value of {\f3 MAX_KEYS} may change over time. When the login policy regarding the use of old keys is changed, more or fewer old keys will be stored. For this, {\f3 MAX_KEYS} needs to be changed.}
 {\f3 MAX_KEYS}, which is the maximum number of keys that will be kept. The value of {{\i m}} starts at 0 and will reach {\f3 MAX_KEYS} eventually and grow no more. The value {\f3 MAX_KEYS} has a minimum of 2 (a new key and at least 1 old key). All values in the array {{\i S}} are shifted up one position when a new key is stored, which will always be inserted at {{\i S}[0]}. This way, with at least one key loaded ({{\i m}>0}), it always holds that {{\i S}[0]} is the newest key, and {{\i S}[{\i m}\u8722?1]} is the oldest key. With {{\i m}>1}, {{\i S}[1]} is the youngest old key. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
The constant {\f3 MAX_ACTIVE_KEYS}, which is the maximum number of keys that will be used for logging users in. This value lies in the range {{\field{\*\fldinst{ EQ [1\\,{\f3 {\i M}{\i A}{\i X}_{\i K}{\i E}{\i Y}{\i S}}]}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Subtracting {\f3 MAX_ACTIVE_KEYS} from {\f3 MAX_KEYS} gives the number of inactive keys which can be used to reactivate expired user keys. Users using a user key that is older than the oldest active Secret key cannot login, but their key can be restored with an inactive Secret key. If a key is used that is older than the oldest inactive key, the key cannot be restored and is lost forever. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 Upon successful login with an old key, the user will be provided with a new user key automatically, with which it can login using the newest Secret key, from that moment on. Changing of user keys is seamless (see section\~{\field{\*\fldinst{\lang1024 REF BMsec_userkeys \\* MERGEFORMAT }}{\fldrslt{3.3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_userkeys \\p }}{\fldrslt{sec_userkeys}}}) and the user might, just as well, be kept unaware of this. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The website\rquote s security policy should prescribe with what frequency Secret keys are to be changed, and how many old keys should be kept. If, for instance, the Secret key is changed every month, and 11 old keys are kept, users can still login using a key that is a year old. If the user key is older than that, the site is not able to verify the user\rquote s key any longer.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.1.2  Terminated accounts\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 When deleting the oldest Secret key from memory, all accounts with a \lquote last login\rquote  date older than the installation date of the second oldest Secret key should be marked \lquote terminated\rquote . Removal of the oldest key renders all those keys unusable. Those accounts can be purged, as they cannot be used again.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.1.3  Expired accounts\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In some situations user access may be barred until some condition is met (see also {\field{\*\fldinst{\lang1024 REF BMsec_conditional_key_replacement \\* MERGEFORMAT }}{\fldrslt{4.3.6}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_conditional_key_replacement \\p }}{\fldrslt{sec_conditional_key_replacement}}}). Accounts can be made temporarily inaccessible for this purpose by letting keys expire. Expiration can happen automatically when users do not login in time to get their keys replaced, or intently by denying key updates. Expired user keys are associated with Secret keys with an index in the range {{\field{\*\fldinst{ EQ [{\f3 {\i M}{\i A}{\i X}_{\i A}{\i C}{\i T}{\i I}{\i V}{\i E}_{\i K}{\i E}{\i Y}{\i S}}\\,{\f3 {\i M}{\i A}{\i X}_{\i K}{\i E}{\i Y}{\i S}})}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Expired accounts can easily be made active again by using inactive Secret keys for the login process (and then renew the key). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Expired accounts can be reinstated, but only before the associated Secret key is erased from memory. After that, there is no way to regenerate the user key for logging in. The user should apply for a new account if it wants to regain access. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.2  Site keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 For each user, a site key is generated once by a pseudo-random generator of the HSM of the login server (see section\~{\field{\*\fldinst{\lang1024 REF BMsec_apply_step3 \\* MERGEFORMAT }}{\fldrslt{4.2.3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_apply_step3 \\p }}{\fldrslt{sec_apply_step3}}}), and need never be replaced. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The site keys are stored in a table of a database of the accounts server, where a hash value will act as the primary key for that table. Each time a user tries to login, the database is queried with the hash value the user supplies, and the site key for that user is returned for further processing.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_userkeys}3.3{\*\bkmkend BMsec_userkeys}  User keys and keyrings\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Together with the site key, a user key is computed by encrypting the site key for the user with the youngest (or current) Secret key, using the {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} algorithm (also see section\~{\field{\*\fldinst{\lang1024 REF BMsec_apply_step3 \\* MERGEFORMAT }}{\fldrslt{4.2.3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_apply_step3 \\p }}{\fldrslt{sec_apply_step3}}}). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The keys users get from the website are stored on a keyring (see section\~{\field{\*\fldinst{\lang1024 REF BMsec_keyring \\* MERGEFORMAT }}{\fldrslt{3.3.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_keyring \\p }}{\fldrslt{sec_keyring}}}). The keyring will be considered an array {{\i Z}} in the rest of the article. A key in a keyring is automatically replaced with a new key by the webserver whenever the Secret key of the login server is changed (see section\~{\field{\*\fldinst{\lang1024 REF BMsec_login_step6 \\* MERGEFORMAT }}{\fldrslt{4.3.6}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_login_step6 \\p }}{\fldrslt{sec_login_step6}}}).\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_keyring}3.3.1{\*\bkmkend BMsec_keyring}  Storing user keys in a keyring\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 A keyring is created by using a random generator of sufficient quality, generating a set of random numbers of 128 bits, stored in a file. Key number zero is used to identify the keyring and will never change after its creation. The other keys are dummies (random bits with no meaning whatsoever), some of which will be overwritten with real keys over time. Real keys in the keyring should optimally be put randomly between the dummy keys. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Typically, 100 random numbers are generated this way, so all keys are conveniently numbered with a one or two digit number (1 through 99), which can easily be remembered. However, you can put any number of keys in a keyring file. From zero keys (which leaves only the keyring identifier {{\i Z}[0]}, and allows you to login to zero websites) up to any amount of keys you bother to carry around with you. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Having more keys than sites you want to login to is just a way to make things a bit harder for those that do not own the keyring to choose keys. If you are not happy with this, you can just add new keys as you acquire them, just as with real keys.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.3.2  Copying keyrings\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 A keyring can be freely copied to other devices, so all keys are available there as well. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Encrypted keyrings can be stored in a public place, for easy access, and act as a backup. A dedicated webserver can be employed for storing encrypted keyrings, which can be used to restore lost keyrings. They can also be used to login when away from home with no access to your own keyring. These temporary keyrings should be discarded when logging out.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.3.3  Irretrievably lost keys and keyrings\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 When a key number is forgotten, or a key inadvertently overwritten, and no record or backup of it can be found, the key must be considered lost. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 As the user has supplied websites with personal information, it may be easy to regain login capabilities by just asking for a new key, provided a username and maybe some other information can be given. Selecting a free keynumber on the keyring and replacing that key with the new one should restore the ability to login. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Keyrings can become unusable or lost in two situations: the device holding it is defective (like a harddisk crash) and no backup has been made, or the encryption cannot be reversed (PIN forgotten). In both cases, the user has to start over and create a new keyring, containing only dummy keys.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.4  Certificates and key pairs\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 As part of the security of the login process, keys need to be exchanged in encrypted form to and from the login server. Furthermore, the website may want to signify to its users that it is using a trusted login server. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To accomodate for this requirement, the login server needs a certificate that holds a public encryption key. The private key that belongs to it is stored in the HSM. With this certificate the users of the login system can validate the trustworthyness of the used login server by validating the chain of trust. The certificate is signed by a Certificate Authority (CA). This CA\rquote s certificate is also signed, etcetera, up to a Root CA. A list of all trusted Root CA\rquote s is stored in the browser of the user and is already used to validate the certificates of websites. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.4.1  Login server keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login server uses two types of {{\field{\*\fldinst{ EQ {\f3 {\i R}{\i S}{\i A}\\s\\do5({\fs16 2048})}}}{\fldrslt }}
} keys: an encryption key and a signing key; both private parts tucked away in its HSM. The public counterparts of these keys are presented to the user with a certificate, signed by a Certificate Authority so the user can validate them. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The encryption keys of the login server are called {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i l}{\i e}})}}{\fldrslt }}
} for the public key (\lquote l\rquote  for \lquote login\rquote ; \lquote e\rquote  for \lquote encryption\rquote ), and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
} for the private key. The signing keys of the login server are called {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i l}{\i s}})}}{\fldrslt }}
} for the public key (\lquote s\rquote  for \lquote signing\rquote ), and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i S}})}}{\fldrslt }}
} for the private key. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.4.2  Accounts server keys\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Like the login server, the accounts server needs its own set of keys for encryption of other keys. No signing is neccesary, so we have {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}{\i e}})}}{\fldrslt }}
} as the public key (\lquote a\rquote  for \lquote account\rquote ) and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i A}{\i E}})}}{\fldrslt }}
} as the private key.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_key_length}3.5{\*\bkmkend BMsec_key_length}  Key lengths\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The length of keys is generally considered as an important aspect. The more bits, the better the key. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 That is true if such a key is used to encrypt data that is in any way predictable, like, for example, a piece of text. If the encrypted data has patterns of any kind, you can directly work with intermediate decryption attempts. Statistical analysis of resulting bit patterns can reveil if a certain key or method is getting close or closer. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 But all values encrypted with our keys are comprised of random bits only. This implies that any result of decryption has to be tried, to establish if the decryption was in any way successful. That would mean many login attempts (millions, billions, or more) which is infeasable. And that is just to crack a user key, which only gives you one login.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.5.1  Minimum key length\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 With a Secret key fixed on 256 bits to accommodate the {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} encryption, all other keys can be a lot smaller than that. Theoretically, a 1-bit key could suffice, but this obviously is not strong enough, as it would take only two attempts to test all possible values. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To rule out any feasable brute force attempts (supposing that a site does not stop countless consecutive failed attempts) a key length of 32 bits should be more than adequate. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In a setup of 12 Secret keys, changed monthly, you cannot login after a year\rquote s worth of trying, since your key has expired by then. To crack a key you will need to try each one individually. Statistically, the average time to find it is half the time to test them all, so you must be kept busy for at least two years to regard a key safe enough. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Assuming that a single login attempt, exhausting all Secret keys each time, could be done in a second (taking into account the network traffic to download and upload webpages and values), you can do 3600 test in one hour. Two years have 17520 hours in total, so {17520{\u215*}3600=63,072,000} attempts could be done within that time. A 26-bit key would require {{\field{\*\fldinst{ EQ 2\\s\\up5({\fs16 26})=67\\,108\\,864}}{\fldrslt }}
} attempts. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 But having 12 Secret keys would also give you 12 posibile hits with each attempt, dividing the time to find it by twelve. Adding another 4 bits to the key (30 bits) would give room for 16 Secret keys. A 32-bit key would enable you to have 64 Secret keys and still need more than 2 years of continuous effort to test all of them. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Keys with fewer than 32 bits are still viable, as long as other measures are taken against brute force attemtps. If that is the case, keys can be a lot shorter, without making a brute force attempt an attractive option.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.5.2  Maximum key length\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 There is no limit to the number of bits in a key, but using more and more bits for keys has its trade-offs. Keys longer than 64 bits require more processing, as they do not fit in CPU registers common today. But even keys longer than 32 bits may be subobtimal in some programming languages that are used to make client side login pages, or server side login programs. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Part of the exchanged values are least significant parts of {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hashes. These give ample proof of having the right key, but reveal nothing of the hashed value\emdash even if the hash function should be reversible. Therefore, the number of bits of the user and site keys must not equal the number of bits of the hash result. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 There are of course hash functions that produce longer hashes, like {{\field{\*\fldinst{ EQ {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 512})}}}{\fldrslt }}
}, but putting more than, say, 128 bits into a key brings no more security. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If this scheme is somehow flawed, it most likely will not because of insufficient key lengths. As such, 128-bit keys should be considered the maximum practical key length.  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMlogging_in}4{\*\bkmkend BMlogging_in}  Logging in\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Having unencrypted its keyring, selected a key number ({{\i k}}), and given its means of identification, the login process can commence. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_user_ids}4.1{\*\bkmkend BMsec_user_ids}  User Identification\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Instead of sending a traditional alphanumeric userid, we send a combination of hashes. This value will be used by the webserver to identify the user, and the webserver will only store hashes in its user database. This value is specially crafted, so guessing will be hard. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The user will still need something as a means of identification. The most basic form of this is to give a name (real or imaginary); in this case in the form of a string of letters. Another form may include biometric features, like an iris scan, a fingerprint, or hand geometry. Or, in contrast, a hardware token may provide a certain value. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The identification value is chosen once per website and can remain the same as long as the keyring exists. There are no restrictions or constraints as to the contents of this identification value, apart from it to be empty. This means that it may be the same and reused for each and every website. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The hash that is sent to the website to identify the user, will be constructed using a combination of the keyring identifyer {{\i Z}[0]} and the identification value ({{\f3 {\i I}{\i D}}}), and is constructed as follows. Compute the {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hash of the keyring identifier and the ID: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})={\f3 {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}({\i Z}[0])}}{\fldrslt }}
\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 1})={\f3 {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}({\f3 {\i I}{\i D}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Then, compute the final 256-bit value {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} by means of an {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} operation: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})={\i H}\\s\\do5({\fs16 0}){\f5\u8853*}{\i H}\\s\\do5({\fs16 1})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 This hash value is a combination of something the user has, or has access to (the keyring) and something the user knows (its chosen name) or uniquely is (some biometric value) or phisically posesses (a hardware token). This makes it hard to match a stolen set of hashes from a webserver with a set of keyrings from a keyring server.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_applying}4.2{\*\bkmkend BMsec_applying}  Applying for an account\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 See section\~{\field{\*\fldinst{\lang1024 REF BMscheme_new_account \\* MERGEFORMAT }}{\fldrslt{5.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_new_account \\p }}{\fldrslt{scheme_new_account}}} for an accompanying flow diagram. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_apply_step1}4.2.1{\*\bkmkend BMsec_apply_step1}  Step 1: Excuse me...\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 When a new user applies for an account, apart from any personal details the website is interested in, it presents the webserver with its hash value {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}. Furthermore, the user should select the index ({{\i d}}) of a hitherto unused key and use {{\i n}} bits of it, at the discretion of, and indicated by, the webserver. \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})={\i Z}[{\i d}] {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Although this is a dummy key that is not used for logins (it will even be replaced after a successful application for an account) it still needs to be secured, since it is used in the application process. Eventually, this key needs to find its way to the login server, so we will encrypt it with its public encryption key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i l}{\i e}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})={\f4 {{\i E}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i d}})\\,{\i K}\\s\\do5({\fs16 {\i l}{\i e}}))}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 The user will then send {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}, and its age, shoe size, and gender to the webserver.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_apply_step2}4.2.2{\*\bkmkend BMsec_apply_step2}  Step 2: Howdy partner! \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The users\rquote  particulars and its identification hash value {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} are relayed to the accounts server, which will create the account. The webserver will request values for a new user from the login server, by forwarding the dummy key ({{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}), and indicating how long the keys should be ({{\i n}} bits long).\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_apply_step3}4.2.3{\*\bkmkend BMsec_apply_step3}  Step 3: What have we here? \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login server will do the following: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Generate a {{\i n}}-bit pseudo-random site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} for the user, which is then encrypted with the public key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}{\i e}})}}{\fldrslt }}
} of the accounts server: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})={\f3 {\i R}{\i a}{\i n}{\i d}{\i o}{\i m}}({\i n})}}{\fldrslt }}
\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})={\f4 {{\i E}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i s}})\\,{\i K}\\s\\do5({\fs16 {\i a}{\i e}}))}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Encrypt the {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} with the current Secret key {{\i S}[0]} to yield the new user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})={\f3 {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}({\i K}\\s\\do5({\fs16 {\i s}})\\,{\i S}[0]) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
The (2048 bit) {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} value is decrypted with the private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
} to yield {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})={\f4 {{\i D}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i h}})\\,{\i K}\\s\\do5({\fs16 {\i L}{\i E}}))}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 which is subsequently used to encrypt {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})={\i K}\\s\\do5({\fs16 {\i u}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Both values {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} are returned to the webserver. \par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMsec_apply_step4}4.2.4{\*\bkmkend BMsec_apply_step4}  Step 4: Here are the results\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The webserver will then relay the new encrypted key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} to the accounts server. The accounts server will decrypt {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} with its private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i A}{\i E}})}}{\fldrslt }}
} to get the site key, but encrypt it again on the spot with the public key of the login server: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})={\f4 {{\i D}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i y}})\\,{\i K}\\s\\do5({\fs16 {\i A}{\i E}}))}}{\fldrslt }}
\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})={\f4 {{\i E}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i s}})\\,{\i K}\\s\\do5({\fs16 {\i l}{\i e}}))}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 and update the new account with it. These encrypted keys can be sent to the login server by the webserver during logins, without further processing.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_apply_step5}4.2.5{\*\bkmkend BMsec_apply_step5}  Step 5: Thanks mate! \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The encrypted user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} is presented to the user, so it can store it in its keyring. The user can decrypt its new key with by using {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
} it used originally: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})={\i K}\\s\\do5({\fs16 {\i x}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Finally, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} is imported in the keyring with something like \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i Z}[{\i d}]=({\f3 {\i R}{\i a}{\i n}{\i d}{\i o}{\i m}}(128\u8722?{\i n}) {\b <<} {\i n}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 The dummy key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
} at {{\i Z}[{\i d}]} is overwritten with 128 random bits, of which the last {{\i n}} bits contain the new key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_full_login}4.3{\*\bkmkend BMsec_full_login}  Login scheme\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The procedure described below to login is the full login scheme. See sections\~{\field{\*\fldinst{\lang1024 REF BMscheme_simplest_login \\* MERGEFORMAT }}{\fldrslt{5.2.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_simplest_login \\p }}{\fldrslt{scheme_simplest_login}}}, {\field{\*\fldinst{\lang1024 REF BMscheme_login_with_old_key \\* MERGEFORMAT }}{\fldrslt{5.2.2}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_login_with_old_key \\p }}{\fldrslt{scheme_login_with_old_key}}}, and {\field{\*\fldinst{\lang1024 REF BMscheme_login_with_wrong_key \\* MERGEFORMAT }}{\fldrslt{5.2.3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_login_with_wrong_key \\p }}{\fldrslt{scheme_login_with_wrong_key}}} for explanatory flow diagrams.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step1}4.3.1{\*\bkmkend BMsec_login_step1}  Step 1: Knock, knock\u8230?\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The user\rquote s login program has to compute the folowing: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
The userid hash {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} (see section {\field{\*\fldinst{\lang1024 REF BMsec_user_ids \\* MERGEFORMAT }}{\fldrslt{4.1}}}). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
An {{\i n}}-bit pseudo-random number {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})={\f3 {\i R}{\i a}{\i n}{\i d}{\i o}{\i m}}({\i n})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
The user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} is taken from the keyring {{\i Z}} at index {{\i k}}. As this is 128-bit value, take the least significant {{\i n}} bits of it. The pseudo-random number is encrypted with it to get the value {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})={\i Z}[{\i k}] {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})={\i R}\\s\\do5({\fs16 {\i u}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
The webserver will return a hash value of the user\rquote s pseudo-random value. To be able to verify this hash, we compute our own hash {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} to verify it with: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})={\f3 {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}({\i R}\\s\\do5({\fs16 {\i u}})) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb100 \fi0 The special userid hash {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} and the encrypted pseudo-random number {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} are sent to the webserver.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step2}4.3.2{\*\bkmkend BMsec_login_step2}  Step 2: Site key lookup and key matching attempts\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The webserver runs a login procedure, see Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_webserver_login \\* MERGEFORMAT }}{\fldrslt{4}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_webserver_login \\p }}{\fldrslt{alg_webserver_login}}}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 After receiving {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} from the user, the encrypted site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} needs to be looked up. A query with {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} is sent by the webserver to the accounts server. If a match is found, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} is returned; otherwise, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} is set to zero, indicating that no such record exists. In the latter case, the values {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} are both set to zero as well, and returned to the user. The user needs to rethink its actions and start over. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Along with {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} the account status {{\i s}} may also be returned. This status may indicate whether we want to allow the user to login or not. If something is required from the user (payment, or otherwise) we might want to expire the account until the requirement is met. We use the value {{\field{\*\fldinst{ EQ {\f3 {\i M}{\i A}{\i X}_{\i A}{\i C}{\i T}{\i I}{\i V}{\i E}_{\i K}{\i E}{\i Y}{\i S}}}}{\fldrslt }}
} to limit the number of keys we want to try. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If {{\field{\*\fldinst{ EQ {\f3 {\i M}{\i A}{\i X}_{\i A}{\i C}{\i T}{\i I}{\i V}{\i E}_{\i K}{\i E}{\i Y}{\i S}}}}{\fldrslt }}
} is set to 1 then accounts will expire immetiately when a new Secret key is inserted. When set to 3, there will be a grace period of 2 times the Secret keys replacement interval. This means that login is granted for this time, in which the user can fulfill its debts. If that does not happen, the account will expire. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Users that have not logged in for a while, but have payed their monthly fees, can still login without problems because all Secret keys will be tried for such logins. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Now, an iterative process starts, trying to find the right Secret key to log the user in. The webserver will send five values to the login server: {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}; {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
}; the number of bits in the user and site keys ({{\i n}}); a boolean value indicating if the user is capable of performing a verify operation using a public signing key ({{\i v}}); and a Secret key index {{\i i}}. This will be repeated (increasing index {{\i i}}), until a match is found, or no more keys can or will be tried. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Finally, we could consider reducing the number of login attempts. Instead of always starting with index {0} for Secret key {{\i S}[0]}, the date of the last login of the user can be taken into account. If the query with {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} as key, that is sent to the accounts database, would also return the last login date, a starting key index {{\i i}} could be computed.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step3}4.3.3{\*\bkmkend BMsec_login_step3}  Step 3: Login server actions\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login server is a processor of login values and calls a function of the HSM to compute them (see Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_hsm \\* MERGEFORMAT }}{\fldrslt{5}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_hsm \\p }}{\fldrslt{alg_hsm}}}). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In case {{\i i}} is less than {{\i m}} (the number of stored Secret keys, see section\~{\field{\*\fldinst{\lang1024 REF BMsec_secret_keys \\* MERGEFORMAT }}{\fldrslt{3.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_secret_keys \\p }}{\fldrslt{sec_secret_keys}}}) the login server calculates the following, all within the HSM: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Decrypt the site key, using the private encryption key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})={\f4 {{\i D}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i K}\\s\\do5({\fs16 {\i a}})\\,{\i K}\\s\\do5({\fs16 {\i L}{\i E}})) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Temporarily, regenerate a user key, using the same algorithm as when the key was originally generated: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})={\f3 {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}({\i K}\\s\\do5({\fs16 {\i s}})\\,{\i S}[{\i i}]) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 with {{\i S}[{\i i}]} the {{\i i}}-th Secret key stored in the HSM. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
With the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, decrypt the pseudo-random the user has sent: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})={\i A}\\s\\do5({\fs16 {\i u}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
Calculate a hash with which the user can verify we own the site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and a corresponding Secret key {{\i S}[{\i i}]}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})={\f3 {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}({\i R}\\s\\do5({\fs16 {\i u}})) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 5.\tab
If the user is able and wants to verify the signature of the login server, then the value {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} will be replaced with a signature thereof with the signing key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i S}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})={\f4 {{\i S}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i B}\\s\\do5({\fs16 {\i s}})\\,{\i K}\\s\\do5({\fs16 {\i L}{\i S}}))}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 We use and send only the signature, not the {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} value also. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 6.\tab
To be able to verify that the user owns and knows its user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, is not sending a replay of some earlier successfull login sequence, and will be unable to ly about the correctness of the hash of the pseudo-random the webserver will send, we calculate a challenge for the user. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 If the index {{\i i}} equals zero, generate a pseudo-random value \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})={\f3 {\i R}{\i a}{\i n}{\i d}{\i o}{\i m}}({\i n})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 otherwise, compute \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})={\f3 {\f3 {\i A}{\i E}{\i S}\\s\\do5({\fs16 256})}}({\i K}\\s\\do5({\fs16 {\i s}})\\,{\i S}[0]) {\b mod} 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 which will be the new key for the user. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 We then encrypt {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} to a value {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} the user can decrypt using its key: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})={\i R}\\s\\do5({\fs16 {\i s}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 This value will be different for each time the loop is executed, even if the same new key is transmitted. This is because {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} will change each time, as it is the encryption of {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} with a different secret key {{\i S}[{\i i}]}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 7.\tab
We now know both random values. If the user knows them also (by successfully decrypting {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}) it can prove this by sending the {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} of both values: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \li600\fi0 \tab
{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})={\i R}\\s\\do5({\fs16 {\i s}}){\f5\u8853*}{\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 This is the value that the webserver should compare. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The HSM will produce the values {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} as a result of the calculations and the login server will send them back to the webserver, as an answer to the five values it was given ({{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
}, {{\i n}}, {{\i v}}, and {{\i i}}). The HSM will delete all temporary values from memory directly afterwards, and remember only its Secret keys. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Should index {{\i i}} equal {{\i m}}, then the array of Secret keys is exhausted. If we reach this situation, we cannot log the user in since all possible attempts have failed. Return zero values for {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} to indicate this.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step4}4.3.4{\*\bkmkend BMsec_login_step4}  Step 4: User verifies site key\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The webserver sends {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} to the user. If both are zero, the login has failed and the user should return to step 1. It is advisable for the user to choose different values for the next try. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} is nonzero, the user verifies whether this value matches with {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If the user is not able to verify a digital signature, just compare {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. Otherwise, it should try to verify the combination of {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} (the hash over {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}) and the signature thereof, which is in {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\f4 {{\i V}}}\\s\\do5({\fs16 {\f3 {\i R}{\i S}{\i A}}})({\i B}\\s\\do5({\fs16 {\i u}})+{\i B}\\s\\do5({\fs16 {\i s}})\\,{\i K}\\s\\do5({\fs16 {\i l}{\i s}}))}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If the two values do not match, the user either has selected the wrong key or uses an old key. Logging in with an old key every now and then is inherent in this scheme, as most Secret keys will be changed at regular intervals. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To indicate that no match has been found, we send \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\f3 0{\i x}0}}}{\fldrslt }}
\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\i n}} zeroes) to the webserver. The webserver will need to start over, and send values {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
}, {{\i n}}, {{\i v}}, and {{\i i}+1} to the login server. So, back to step 3. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 After two unsuccesful attempts the user may be presented a question whether it likes to abort the login procedure or continue trying with this key. To abort, use: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\f3 0{\i x}1}}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 and send this to the webserver (instead of {{\f3 0{\i x}0}}). We return to step 1.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step5}4.3.5{\*\bkmkend BMsec_login_step5}  Step 5: Site verifies user key\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 If {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} matches {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, then the webserver has found a Secret key for the user. The user can now prove it has control over its user key by computing {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})={\i P}\\s\\do5({\fs16 {\i s}}){\f5\u8853*}{\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\i R}\\s\\do5({\fs16 {\i s}}){\f5\u8853*}{\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 which is sent to the webserver as proof. If the webserver accepts {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} as correct it will log the user in. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 If the webserver receives a value {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} that does {\i not} match, something fishy is going on. Further attempts for this account, or from that source should be scrutinized.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_login_step6}4.3.6{\*\bkmkend BMsec_login_step6}  Step 6: User key replacement\par
{\*\bkmkstart BMsec_conditional_key_replacement}{\*\bkmkend BMsec_conditional_key_replacement}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 If this attempt to login was not the first with this key, the webserver may have sent the user a new key in {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} (instead of a pseudo-random value). The user should store this new key in the keyring, overwriting the old key the user has just used: \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i Z}[{\i k}]=({\f3 {\i R}{\i a}{\i n}{\i d}{\i o}{\i m}}(128\u8722?{\i n}) {\b <<} {\i n}){\f5\u8853*}{\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 where all bits of {{\i Z}[{\i k}]} are replaced. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For most websites, restoring user keys that refer to the most recent Secret key {{\i S}[0]} will be done without hesitation. For some, refreshing keys will be done only when certain conditions are met, like payment of monthly fees, a certain number of reviews written, or some amount of data uploaded. Until then, logging in with a valid (but in this context a typically \lquote old\rquote ) key is granted. But if, for instance, payment is overdue, the key will expire and logging in is no longer possible. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Instead of incrementing index {{\i i}} in step 2, the index is decremented. The HSM will just be sending random values for {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} in that case, for all values of index {{\i i}}. To indicate to the user that no new key is sent, the website will replace it with {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} \par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3698\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})={\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 and return this value to the user. In this case, no keys should be decrypted or overwritten.  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMsec_schemes}5{\*\bkmkend BMsec_schemes}  Schemes\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Here are some example flows for logins with {{\i n}=13} (random values from 0 to 8191). Values between parentheses are calculated but not sent. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMscheme_new_account}5.1{\*\bkmkend BMscheme_new_account}  Applying for an account\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Table\~{\field{\*\fldinst{\lang1024 REF BMtable_applying \\* MERGEFORMAT }}{\fldrslt{5.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMtable_applying \\p }}{\fldrslt{table_applying}}} shows what happens when applying for a new account (see section\~{\field{\*\fldinst{\lang1024 REF BMsec_applying \\* MERGEFORMAT }}{\fldrslt{4.2}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_applying \\p }}{\fldrslt{sec_applying}}}). {\par
\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_applying}1{\*\bkmkend BMtable_applying}: Applying for a new account}{\field{\*\fldinst TC "1 Applying for a new account" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { Step}\cell}
{\pard\intbl\qr {User}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Webserver}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Login server}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 1}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {{{\f5\u10232*}{\i n}}}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 2}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})=4444}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})=7707}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 3}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {Create}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {account}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}});{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 4}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})=4289}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})=1299}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})=1093}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})=4444}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i K}\\s\\do5({\fs16 {\i x}});{\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})=5401}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 5}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})=4289}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1936\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3621\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4476\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6388\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 6}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})=1093}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 Steps: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
The website indicates how many bits are used for keys. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
The user selects a dummy key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
}. This value is encrypted with public key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i l}{\i e}})}}{\fldrslt }}
} (a block of 2048 bits). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
The webserver creates a new account. It forwards {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} unaltered to the login server, along with {{\i n}}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
The login server calculates a new site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and encrypts this with private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
} to get {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} (a block of 2048 bits). It decrypts {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} to get {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
}. Finally, it calculates {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} from {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. Values {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} are sent to the website. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 5.\tab
The website decrypts {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i y}})}}{\fldrslt }}
} to get {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, which it stores as key for the new account. Value {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} is sent to the user. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 6.\tab
The user decrypts {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i x}})}}{\fldrslt }}
} with {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i d}})}}{\fldrslt }}
} and stores it in {{\i Z}[{\i d}]}. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 5.2  Logging in\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 These are flow diagrams for successful and unsuccessful logins, as described in section\~{\field{\*\fldinst{\lang1024 REF BMsec_full_login \\* MERGEFORMAT }}{\fldrslt{4.3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_full_login \\p }}{\fldrslt{sec_full_login}}}. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMscheme_simplest_login}5.2.1{\*\bkmkend BMscheme_simplest_login}  Simplest login scheme\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Table\~{\field{\*\fldinst{\lang1024 REF BMtable_simplest_login \\* MERGEFORMAT }}{\fldrslt{5.2.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMtable_simplest_login \\p }}{\fldrslt{table_simplest_login}}} shows a login sequence with a valid and new key. {\par
\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_simplest_login}2{\*\bkmkend BMtable_simplest_login}: Login with a new key}{\field{\*\fldinst TC "2 Login with a new key" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { Step}\cell}
{\pard\intbl\qr {User}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Webserver}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Login server}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 1}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {{{\f5\u10232*}{\i n}}}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 2}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})={\i x}{\i y}{\i z}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}=\u8722?1}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ ({\i R}\\s\\do5({\fs16 {\i u}})=8021)}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})=1234}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})=5432}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i U}\\s\\do5({\fs16 {\i h}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}}){\f5\u8658*}{\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  3}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}={\i i}+1}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i K}\\s\\do5({\fs16 {\i s}});{\i i};{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\i i}<{\i m}}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 4}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=5432}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})=8021}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=8172}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=2776}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}});{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=5517}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 5}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=5432}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=8172}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=5517}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 6}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})={\i B}\\s\\do5({\fs16 {\i s}}){\f5\u8658*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=2776}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})=5517}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  7}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})={\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx928\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2133\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3725\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4930\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6632\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {Login OK}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 Steps: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
The website indicates how many bits are used for keys. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Calculate {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} from {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. Send {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} to the webserver. Webserver has entry for {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} and finds {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
Start with {{\i i}=0} and send {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\i i}} to the login server. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
Login server calculates {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and sends them back to the webserver. The webserver finds that values are valid for a login. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 5.\tab
The webserver takes {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and sends them to the user. The user sees a nonzero value for {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 6.\tab
Since {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})={\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} the user calculates {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and from this {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. This value is sent to the webserver, which concludes that {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 7.\tab
To indicate that login is granted, the webserver returns {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}. \par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMscheme_login_with_old_key}5.2.2{\*\bkmkend BMscheme_login_with_old_key}  Login scheme with old key\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login depicted in table\~{\field{\*\fldinst{\lang1024 REF BMtable_login_with_old_key \\* MERGEFORMAT }}{\fldrslt{5.2.2}}} {\field{\*\fldinst{\lang1024 PAGEREF BMtable_login_with_old_key \\p }}{\fldrslt{table_login_with_old_key}}} succeeds but takes some more steps because an old key is used. {\par
\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_login_with_old_key}3{\*\bkmkend BMtable_login_with_old_key}: Login with old key}{\field{\*\fldinst TC "3 Login with old key" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { Step}\cell}
{\pard\intbl\qr {User}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Webserver}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Login server}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 1}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {{{\f5\u10232*}{\i n}}}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 2}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})={\i x}{\i y}{\i z}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ ({\i R}\\s\\do5({\fs16 {\i u}})=8021)}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}=\u8722?1}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})=1234}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})=5432}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i U}\\s\\do5({\fs16 {\i h}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}}){\f5\u8658*}{\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  3\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}={\i i}+1}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i K}\\s\\do5({\fs16 {\i s}});{\i i};{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\i i}<{\i m}}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 4\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=1902}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})=922}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=6300}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=4994}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}});{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=4120}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 5\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=1902}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=6300}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=4120}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 6\rquote }\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}}){\u8800*}{\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\u8800*}{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  3\rquote -6\rquote *}\cell}
{\pard\intbl\qr {{\u8942*}}\cell}
{\pard\intbl\qc {{\u8942*}}\cell}
{\pard\intbl\ql {{\u8942*}}\cell}
{\pard\intbl\qc {{\u8942*}}\cell}
{\pard\intbl\ql {{\u8942*}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  3}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}={\i i}+1}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i K}\\s\\do5({\fs16 {\i s}});{\i i};{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\i i}<{\i m}}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 4}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=5432}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})=8021}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=8172}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=2776}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}});{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=5517}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 5}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=5432}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=8712}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=5517}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 6}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})={\i B}\\s\\do5({\fs16 {\i s}}){\f5\u8658*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=5678}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})=5517}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})={\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {  7}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})={\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {Login OK}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql { 8}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}}){\u8800*}{\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1162\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2324\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3857\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5019\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6658\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7395
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {Update keyring}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 Steps 1 and 2 are the same as in the diagram in section\~{\field{\*\fldinst{\lang1024 REF BMscheme_simplest_login \\* MERGEFORMAT }}{\fldrslt{5.2.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_simplest_login \\p }}{\fldrslt{scheme_simplest_login}}}. Steps 3\rquote  through 6\rquote  are repeated one or more times, but result in \ldblquote wrong\rdblquote  answers from the webserver. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 When the webserver has found the right index, the login server calculates values with the \ldblquote right\rdblquote  Secret key. Steps 3 through 7 are then identical to those in section\~{\field{\*\fldinst{\lang1024 REF BMscheme_simplest_login \\* MERGEFORMAT }}{\fldrslt{5.2.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMscheme_simplest_login \\p }}{\fldrslt{scheme_simplest_login}}}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Finally, we know it took multiple attempts and additionally find that {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}}){\u8800*}{\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, so we need to update the keyring in step 8. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMscheme_login_with_wrong_key}5.2.3{\*\bkmkend BMscheme_login_with_wrong_key}  Login scheme with wrong key\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Using a wrong key won\rquote t get you in\u8230? {\par
\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_login_with_wrong_key}4{\*\bkmkend BMtable_login_with_wrong_key}: Login with wrong key}{\field{\*\fldinst TC "4 Login with wrong key" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { Step}\cell}
{\pard\intbl\qr {User}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Webserver}\cell}
{\pard\intbl\qc {Value}\cell}
{\pard\intbl\ql {Login server}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 1}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {{{\f5\u10232*}{\i n}}}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 2}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})={\i x}{\i y}{\i z}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i n}=13}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ ({\i R}\\s\\do5({\fs16 {\i u}})=8021)}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}=\u8722?1}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})=1234}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {({{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}})=5432}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i U}\\s\\do5({\fs16 {\i h}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}}){\f5\u8658*}{\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {  3\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}={\i i}+1}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i K}\\s\\do5({\fs16 {\i s}});{\i i};{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\i i}<{\i m}}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 4\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=1902}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})=922}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=6300}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})=4994}}{\fldrslt }}
})}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}});{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=4120}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 5\rquote }\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=1902}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=6300}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}}){\u8800*}0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=4120}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 6\rquote }\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i u}}){\u8800*}{\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}}){\u8800*}{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {  3\rquote -6\rquote *}\cell}
{\pard\intbl\qr {{\u8942*}}\cell}
{\pard\intbl\qc {{\u8942*}}\cell}
{\pard\intbl\ql {{\u8942*}}\cell}
{\pard\intbl\qc {{\u8942*}}\cell}
{\pard\intbl\ql {{\u8942*}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {  3}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\i i}={\i i}+1}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}});{\i K}\\s\\do5({\fs16 {\i s}});{\i i};{\i n}{\f5\u10233*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\i i}{\u8805*}{\i m}}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 4}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}});{\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 5}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {{{\field{\*\fldinst{ EQ {\f5\u10232*}{\i B}\\s\\do5({\fs16 {\i s}});{\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}}\cell}
{\pard\intbl\ql {({{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})=0}}{\fldrslt }}
})}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql { 6}\cell}
{\pard\intbl\qr {{{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})={\i Q}\\s\\do5({\fs16 {\i s}})=0{\f5\u8658*}}}{\fldrslt }}
}}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1145\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2395\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3906\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5051\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6667\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7394
{\pard\intbl\ql {}\cell}
{\pard\intbl\qr {Login Failed}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\ql {}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 The loop {3'\u8722?6'*} is repeated so many times that eventually {{\i i}{\u8805*}{\i m}} (the number of keys in {{\i S}}).  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 6  Security proof\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 All exchange of data between user and webserver should be transported over a secure channel. Not that the login sequence would be directly vulnerable, but for the other data that is transported. Requiring a login implies the subsequent exchange of private, valuable, or secret data in almost all cases. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 6.1  On random numbers\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login sequence is an exchange of random data. The random numbers used in this exchange are generated by two sources: the pseudo-random generator of the system running the webbrowser and that of the login server. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 When encrypting valuable data, using pseudo-random numbers that are generated with weak algorithms, or are weak themselves, eases decryption. In this case, however, there is nothing valuable to encrypt; only random bits. Cryptanalysis of random data is very hard. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Having a poor pseudo-random generator on the system running the webbrowser, as is typically the case for home-use equipment like PCs, tablets, or smartphones, does not really hurt, because this is the \ldblquote valuable data\rdblquote  that is encrypted. It does not really matter which value is used for this, in this login scheme (but see section\~{\field{\*\fldinst{\lang1024 REF BMsec_manipulating_values \\* MERGEFORMAT }}{\fldrslt{6.3}}}). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The random numbers generated by the login server are of good quality, for they are created by the pseudo-random generator of the HSM. These random numbers are used for site keys and can be considered strong. User keys are directly dependent of these keys, so they can be considered strong as well. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 6.2  Eavesdropping the connections\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Somebody able to eavesdrop on the exchange of values between the user and the webserver will see several values being transmitted. An attempt is made to prove that these values are of little use to a hacker. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 6.2.1  Applying for an account\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The dummy key that is used in the application procedure for a new account is encrypted with the key from a certificate of the login server.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 6.2.1.1  Values passing the webserver\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 A user fills in a form on a webpage to supply enough information for the creation of a new account. It also must send a dummy key and a hash. The webserver sends values to the login server and relays the results to the accounts server. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 h})}}{\fldrslt }}
}} An encrypted dummy key from the keyring. Only the login server can decrypt this. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ U\\s\\do5({\fs16 h})}}{\fldrslt }}
}} A special value consisting of the {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} of two {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hashes (see section {\field{\*\fldinst{\lang1024 REF BMsec_user_ids \\* MERGEFORMAT }}{\fldrslt{4.1}}}). Relayed as-is to the accounts server. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b User details} To fill the accounts database with. Relayed as-is to the accounts server. Although this data has privacy aspects they are considered of no value in this context. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 y})}}{\fldrslt }}
}} New encrypted site key returned by the login server. Only the accounts server can decrypt this. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 x})}}{\fldrslt }}
}} Encrypted user key returned by the login server. Only the user can decrypt this value. \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 6.2.1.2  Values passing the login server\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 h})}}{\fldrslt }}
}} The encrypted dummy key which the login server decrypts using its private encryption key. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 y})}}{\fldrslt }}
}} New site key (encrypted with public key from accounts server). Returned to the webserver. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 x})}}{\fldrslt }}
}} New user key (encrypted with dummy key). Returned to the webserver. \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 6.2.1.3  Values passing the accounts server\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ U\\s\\do5({\fs16 h})}}{\fldrslt }}
}} The hash value from the user. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 y})}}{\fldrslt }}
}} New site key which the accounts server decrypts with it private key. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b User details} To fill the accounts database with. \par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMsec_passing_webserver}6.2.2{\*\bkmkend BMsec_passing_webserver}  Logging in\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 6.2.2.1  Values passing the webserver\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ U\\s\\do5({\fs16 h})}}{\fldrslt }}
}} The hash value is sent once per login attempt and passed to the accounts server. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 a})}}{\fldrslt }}
}} The encrypted site key belonging to {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}, as returned by the accounts server. Only the login server can decrypt this. Eavesdropping on this traffic will give the hacker a set of combinations of values. Having {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} for each user is of no value, however, since the hacker does not have the means (array {{\i S}} and the private key in the HSM of the login server) to turning this into {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} which is needed to login. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ A\\s\\do5({\fs16 u})}}{\fldrslt }}
}} A random number XOR-ed with the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} is sent to the webserver. The random number is different for each login attempt. This random number is most likely generated by a suboptimal pseudo-random generator, namely the generator of a PC, tablet, or smart phone. Even so, you cannot easily determine {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} from this value, since this value is sent once per login attempt. Harvesting large quantities is practially infeasible, so statistical analysis will fail. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ B\\s\\do5({\fs16 s})}}{\fldrslt }}
}} The login server tries to decrypt the random number {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} from the user by regenerating the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. It then returns either the least significant {{\i n}} bits of the {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hash of the found random value, or the signature thereof, to the webserver. \line  This value is sent repeatedly until the right user key has been found. Since different user keys will be tried, the hash value will differ each time. None of the hashes or signatures returned this way give any hint to {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} nor {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ P\\s\\do5({\fs16 s})}}{\fldrslt }}
}} The webserver also receives a random number XOR-ed with the regenerated user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} from the login server. If the login server chooses to change keys, the random number contained in {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} will be the new user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} but further undistinghuishable from any other random value. Since {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} depends on {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} (which is a good quality pseudo-random number from an HSM and different for each {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}) {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} cannot be calculated from a single or a series of {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} values. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ Q\\s\\do5({\fs16 s})}}{\fldrslt }}
}} The response of the user to the {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} challenge sent by the login server. Used for comparison with {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} sent by the user. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ Q\\s\\do5({\fs16 u})}}{\fldrslt }}
}} The user returns the {{\field{\*\fldinst{ EQ {\f3 {\i X}{\i O}{\i R}\\s\\do5({\fs16 })}}}{\fldrslt }}
} of both random values. Nothing can be deduced from this value. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The only practical data present at the webserver would be the set of all {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} values, since these values are a direct link to an account for the website. Logging in will not be possible; the only harm that can come from this is a denial-of-service attack, by trying to login with bogus keys, so that accounts are locked out for some time. \par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 6.2.2.2  Values passing the login server\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The values {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
}, {{\i n}}, {{\i v}}, and {{\i i}} are sent by the webserver to the login server. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ A\\s\\do5({\fs16 u})}}{\fldrslt }}
}} This is the user\rquote s cryptogram, as received by the webserver. It is a random value encrypted with the user key, which makes this also a random value. It is sent repeatedly (and unaltered) with each step in the login process. Nothing can be learned from this, as with the next login this value is changed completely. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {{\field{\*\fldinst{ EQ K\\s\\do5({\fs16 a})}}{\fldrslt }}
}} The encrypted site key belonging to the user. This value is encrypted with the public key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i l}{\i e}})}}{\fldrslt }}
} of a {{\field{\*\fldinst{ EQ {\f3 {\i R}{\i S}{\i A}\\s\\do5({\fs16 2048})}}}{\fldrslt }}
} keypair. The private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
} resides in the HSM. After decrypting it to the real site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, the login server will temporarily regenerate the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} from this. All decrypted values stay within the HSM. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {n}} The number of bits there are in values {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {v}} A boolean indicating whether the user will verify signatures of {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\b {i}} The index to use when selecting Secret keys. Increments with each attempt. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Values {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} are returned. See section\~{\field{\*\fldinst{\lang1024 REF BMsec_passing_webserver \\* MERGEFORMAT }}{\fldrslt{6.2.2.1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMsec_passing_webserver \\p }}{\fldrslt{sec_passing_webserver}}} for a discussion of these values. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The random value {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} in the HSM used to create {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} cannot be guessed from these two values, since only the least significant part the value of the {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hash is returned with {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. Therefore, the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} is also secured. Since the Secret keys are kept in an HSM, {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} cannot be derived from {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
}. The {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} value cannot be related to any account from the webserver, as only the webserver knows to which login attempt these values belong and cannot be derived from any value exchanged here.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_manipulating_values}6.3{\*\bkmkend BMsec_manipulating_values}  Manipulating values\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The hacker has control over values {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, which he or she can change to any bit pattern. Values {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} are sent once during a login. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Userid harvesting malware must replace the system function of generating random numbers and be able to intercept network packets before they are encrypted by the SSL/TLS software. That would mean replacing a function of the SSL library as well. Only then can they calculate the user key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}, using the known random values, and filter out the userid hash {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Sending a random value for {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} always gives you a response. In most cases a zero value for {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} are returned, indicating that no record exists belonging to {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}. Given the fact that {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i k}})}}{\fldrslt }}
} depends on {{\i Z}[0]} and a userid, finding a valid {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} will only be possible when the keyring has been successfully decrypted. Generating specific values for {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} by guessing userid\rquote s and sending those to a webserver (along with a random value for {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}) might give rise to non-zero (but bogus) values for {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}. In that case a userid has been harvested. From that moment on each key in the keyring can be tried to see if it fits. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Suppose a valid {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
} has been found. All the webserver will do with any value of {{\field{\*\fldinst{ EQ {\i A}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} is decrypt it with a key dependent on {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}, and return the least significant {{\i n}} bits of the {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} hash of this. Should {{\field{\*\fldinst{ EQ {\f3 {\i S}{\i H}{\i A}\\s\\do5({\fs16 256})}}}{\fldrslt }}
} somehow be totally reversible, having only half the value leaves {{\field{\*\fldinst{ EQ 2\\s\\up5({\fs16 {\i n}})}}{\fldrslt }}
} possible values for the random value, so no user key or site key can be obtained this way.   \par
\page
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 7  Implementation\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 7.1  Algorithms\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The several algorithms explained in Section {\field{\*\fldinst{\lang1024 REF BMlogging_in \\* MERGEFORMAT }}{\fldrslt{4}}} are represented here in a consise manner. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_userid_hash}7.1.1{\*\bkmkend BMalg_userid_hash}  Userid hashes\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The hash that is used in the login procedure is composed of something you have (the keyring) and something you know (the userid). Together, they are one part of the values needed to login. It is calculated with Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_userid_hash \\* MERGEFORMAT }}{\fldrslt{1}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_userid_hash \\p }}{\fldrslt{alg_userid_hash}}}. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_new_account}7.1.2{\*\bkmkend BMalg_new_account}  New account\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_new_account \\* MERGEFORMAT }}{\fldrslt{2}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_new_account \\p }}{\fldrslt{alg_new_account}}} is run by the login server to get the login values for a new user. It is called by the webserver when the user has provided all necessary data. The values returned will be relayed to the accounts server. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_user_login}7.1.3{\*\bkmkend BMalg_user_login}  User login program\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 A user must complete Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_user_login \\* MERGEFORMAT }}{\fldrslt{3}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_user_login \\p }}{\fldrslt{alg_user_login}}} successfully to login. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 It is called with the hash, the keyring, an index, and the decryption key from the certificate of the login server. The function {\scaps AskToContinue} is called with the attempts counter as parameter. Only after two attempts should the user be asked if further attempts should be tried. It is up to the implementer if this question is asked once, at every further attempt, or at some other interval. If no actual question is asked, the function can return {{\f3 0}} directly. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_webserver_login}7.1.4{\*\bkmkend BMalg_webserver_login}  Webserver program\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 With Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_webserver_login \\* MERGEFORMAT }}{\fldrslt{4}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_webserver_login \\p }}{\fldrslt{alg_webserver_login}}} the webserver determines whether a user should be granted access. This simple algorithm does not calculate anything, it just compares values and sends data around. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The accounts server can indicate to the webserver (through account status {{\i s}}, and the site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}) what is required of the user; either now or in the near future. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_hsm}7.1.5{\*\bkmkend BMalg_hsm}  Login server program\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg_hsm \\* MERGEFORMAT }}{\fldrslt{5}}} {\field{\*\fldinst{\lang1024 PAGEREF BMalg_hsm \\p }}{\fldrslt{alg_hsm}}} computes values for the webserver to check. It uses private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i E}})}}{\fldrslt }}
} for decryption of the site key. Private key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i L}{\i S}})}}{\fldrslt }}
} is used to sign the user random {{\field{\*\fldinst{ EQ {\i R}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} and yield {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}.  {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 7.2  Login webpages\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The login algorithms for both the user and the webserver are presented as contiguous programs. Since there are several exchanges of values, and the fact that the user has no login program at its disposal, the algorithms need to be broken apart. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The website can present login code to the user through the inclusion of JavaScript in the HTML login pages. At the server side, PHP can be used to generate HTML with JavaScript. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_startlogin}7.2.1{\*\bkmkend BMalg_startlogin}  First page\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This can be a normal HTML page. It must contain JavaScript code to start the login process, by calculating {{\i A}{\i u}}, {{\i U}{\i h}}, and the key index {{\i k}}, which the user must select. It also calculates {{\i B}{\i u}}, and its value is stored in the sessionStorage of the browser. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMalg_phplogin1}7.2.2{\*\bkmkend BMalg_phplogin1}  Initial PHP page\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The initial PHP page queries the accounts database for a user with hash {{\field{\*\fldinst{ EQ {\i U}\\s\\do5({\fs16 {\i h}})}}{\fldrslt }}
}. If such user hash exists the site key {{\field{\*\fldinst{ EQ {\i K}\\s\\do5({\fs16 {\i a}})}}{\fldrslt }}
} is returned and stored in the session array. Otherwise a page is displayed to inform the user the login process has failed due to a mismatch. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 From that moment on, the webserver sends webpages to the browser that calculate the value {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
}. These pages are identical, except for the values of {{\field{\*\fldinst{ EQ {\i B}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\i P}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
} that are sent along. After computation of {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}, the form, containing an input element that will hold the {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i u}})}}{\fldrslt }}
} value, is automatically submitted. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The initial PHP page sends the first of these (almost identical) webpages; the action option in the form will call the second PHP page for all subsequent calculations. {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 7.2.3  Second PHP page\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The second, and only other, PHP page will compare values and send one of three possible webpages as a result of this: login succeeded, login failed, or another copy of the calculation page for {{\field{\*\fldinst{ EQ {\i Q}\\s\\do5({\fs16 {\i s}})}}{\fldrslt }}
}.  \par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 8  Conclusions\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The security of the login process for websites can be greatly improved by using a keyring at the user side and an HSM employed by the website. Instead of sending relatively short, easy to guess strings (passwords) over the line, the use of encrypted random values, up to 128 bits each, is a big improvement. No keys are sent, just random values, which will be different each time a user logs in. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For hackers, getting login data in huge numbers will be very difficult, since this data is no longer stored centrally, but split between website and user. Each part alone has no value, and all values stored at the website render no valid login data without Secret keys. These keys are kept in very secure hardware: an HSM. Sniffing network traffic or collecting keystrokes with Trojans will not help. Keyrings have very high entropy and are encrypted, so to no direct use to hackers as well; they may be stored on the web for easy access and backup. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Several important security measures are automatically implemented: keys are changed frequently (as frequent as Secret keys are changed), they differ for each website, and keys on a keyring and the knowledge which key is used for what site constitutes two-factor authentication. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For the user, the way to logon to websites will change, but it will be an improvement over the burden of keeping track of all passwords. One userid for all sites and a single key number for a website is all you have to remember.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 8.1  Advantages\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In the following cases a keyring is superior to the use of passwords. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Websites have all login information stored centrally. If an hacker can obtain this data and decrypt it, it has access to all\emdash possibly millions\emdash accounts at once 
[{\field{\*\fldinst{\lang1024 REF BIB_wiki_linkedin \\* MERGEFORMAT }}{\fldrslt{5}}}
]. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i Using the keyring system there is no usable login information whatsoever at the server hosting the website. There is no way that the user information that {\i0\b0\scaps0 is} present yield any usable login data. Hacking a website to obtain logins is useless.  Other reasons to hack websites will remain, however, and using keyrings does not prevent hacking; it just eliminates one of the major attractions.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Users tend to have the same password and the same login name for several websites. A hack of an insufficiently protected site could yield valid usernames and passwords of perfectly protected sites. (Hack of www.babydump.nl yields at least 500 valid logins for www.kpn.nl.) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i Even if all user keys for a website were obtained in a hack, these would be useless for any other website, since they differ by definition.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Websites require the user to change passwords. As more websites do this, more and more passwords a user has to remember, change. Ideally, no password for a website should be the same as for another website, but that is impractical. This would mean that each and every password needs to be written down, because the number of passwords is too much to remember for most. This thwarts the principle that passwords need to be remembered and never written down. The requirements to change passwords frequently and that they should differ from any other password is an inhuman task. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i Using the keyring system, keys will differ for each website by definition and change regularly and automatically. Key numbers (the ordinal numbers in the keyring) don\rquote t change, so most of them can be remembered by the average human.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Sometimes, getting unauthorized access to an account is as simple as just looking at the keyboard to see what the password is. The userid is always displayed when logging in, so shoulder surfing is very effective. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i Using a keyring, shoulder surfing cannot be used directly to login. Since a keyring is something you have to have, you cannot login using only the userid and the key number. You need to have access to the (unencrypted) keyring as well. Therefore, using a keyring is a basic form of 2-factor authentication.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
People tend to use weak passwords (unless a website specifically enforces the use of strong passwords) which can be guessed using specialized tools. If that yields no success, brute force attacks can be launched; to just try all possible passwords with limited length. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i Password guessing nor brute force attacks are an option when trying to login, since no passwords of any kind are exchanged. Even if the keys themselves would be used as an old-fashioned password, the search area would encompass {{\field{\*\fldinst{ EQ 2\\s\\up5({\fs16 128})}}{\fldrslt }}
} or {{\field{\*\fldinst{ EQ 3.4{\u8901*}10\\s\\up5({\fs16 38})}}{\fldrslt }}
} equally likely possibilities. Trying 1 million possibilities per second it would still take {{\field{\*\fldinst{ EQ 10\\s\\up5({\fs16 32})}}{\fldrslt }}
} seconds to try them all.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
The validity of the connection to websites is built on trust. HTTPS connections are protected using certificates. Sometimes trust only goes so far, and bogus but valid website certificates are used (Dorifel virus) or even the Root CA certificates are forged (see the DigiNotar hack). In that case, the user\rquote s trust is betrayed and the user left helpless. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i With the keyring solution no standalone substitute websites can exist; login data must be redirected to the real website. A substitute website does not have the right Secret keys. A user will notice this by wrong answers from the website and the login will abort from the user side.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Visitors of websites are lured to other, well built fraudulent websites, mimicking websites of banks and such (phishing). Here, a simple mail can give a lot of trouble, redirecting users to an unsecure copy of a website, without the user suspecting anything. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i All communication to and from the malicious website can be passed on to the real website, to give the user the sense it is talking to the real site. Obtaining valid login data this way (as a man in the middle) is useless, since no keys are sent over the line. The data that is used to validate a user is meaningless for the next login.} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
People are sometimes called by other people, claiming to be employees of banks. In order to \ldblquote help\rdblquote  solve a problem, users are asked to give their login credentials. Some ignorent users are willing to oblige. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i With a keyring the only thing slightly useful to a hacker would be the userid. The keynumber is of no use, since the hacker has no access to the keyring itself; telling him which key index is used to login has no value.} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 Acknowledgements\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Thanks to Martijn Donders for his cryptographic support, and Rob Bloemer for reviewing the first draft of this article. The review sessions with Jannes Smitskamp were pleaseant and intense, and helped a lot to expose some hidden flaws; which were all remedied elegantly.\par
{\pard\plain\s61\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\plain\b\fs32 References}\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \sb60 \li450\fi0 [{\v\*\bkmkstart BIB_Adams_1999_UE_322796_322806}1{\*\bkmkend BIB_Adams_1999_UE_322796_322806}]\tab
Anne Adams and Martina\~Angela Sasse. Users are not the enemy. {\i Commun. ACM}, 42(12):40\endash 46, December 1999.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_Honan2012}2{\*\bkmkend BIB_Honan2012}]\tab
Mat Honan. Kill the password: Why a string of characters can\rquote t protect us anymore. {\i Wired Magazine}, 11 2012.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_Schneier_2005}3{\*\bkmkend BIB_Schneier_2005}]\tab
Bruce Schneier. {Write Down Your Password}. Cryptogram Newsletter, June 2005.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_youtube_tobyturner}4{\*\bkmkend BIB_youtube_tobyturner}]\tab
Toby Turner. Password rant, December 2012. http://www.youtube.com/ watch? v=jQ7DBG3ISRY.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_wiki_linkedin}5{\*\bkmkend BIB_wiki_linkedin}]\tab
Wikipedia. 2012 linkedin hack \emdash  wikipedia{,} the free encyclopedia, 2012. [Online; accessed 17-September-2012].\par
}\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs20\sl240\slmult1 \sb60 \fi0  List of Tables\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
{\field{\*\fldinst TOC \\f t }{\fldrslt }}
}}
