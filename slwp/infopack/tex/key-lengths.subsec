
\Subsection{Key lengths}
\label{sec:key_length}
The length of keys is generally considered an important aspect.
The more bits, the better the key.
\par
That is true if such a key is used to encrypt data that is in any way predictable,
like, for example, a piece of text.
If the encrypted data has patterns of any kind,
you can directly work with intermediate decryption attempts.
Statistical analysis of resulting bit patterns can reveal if a certain key or method is getting close or closer.
\par
But all values encrypted with our keys are comprised of random bits only.
This implies that any result of decryption has to be tried,
to establish if the decryption was in any way successful.
That would mean many login attempts
(millions, billions, or more)
which is infeasable.
And that is just to crack a user key,
which only gives you one login.

\subsubsection{Minimum key length}
With a Secret key fixed on 256 bits to accommodate the \AES\ encryption,
all other keys can be a lot smaller than that.
Theoretically,
a 1-bit key could suffice,
but this obviously is not strong enough,
as it would take only two attempts to test all possible values.
\par
To rule out any feasible brute force attempts
(supposing that a site does not stop countless consecutive failed attempts)
a key length of 32 bits should be more than adequate.
\par
In a setup of 12 Secret keys, changed monthly,
you cannot login after a year's worth of trying,
since your key has expired by then.
To crack a key you will need to try each one individually.
Statistically, the average time to find it is half the time to test them all,
so you must be kept busy for at least two years to regard a key safe enough.
\par
Assuming that a single login attempt,
exhausting all Secret keys each time,
could be done in a second
(taking into account the network traffic to download and upload webpages and values),
you can do 3600 test in one hour.
Two years have 17520 hours in total,
so $17520\times 3600=63,072,000$ attempts could be done within that time.
A 26-bit key would require $2^{26}=67,108,864$ attempts.
\par
But having 12 Secret keys would also give you 12 possibile hits with each attempt,
dividing the time to find it by twelve.
Adding another 4 bits to the key
(30 bits)
would give room for 16 Secret keys.
A 32-bit key would enable you to have 64 Secret keys and still need more than 2 years of continuous effort to test all of them.
\par
Keys with fewer than 32 bits are still viable,
as long as other measures are taken against brute force attempts.
If that is the case,
keys can be a lot shorter,
without making a brute force attempt an attractive option.

\subsubsection{Maximum key length}
There is no limit to the number of bits in a key,
but using more and more bits for keys has its trade-offs.
Keys longer than 64 bits require more processing,
as they do not fit in CPU registers common today.
But even keys longer than 32 bits may be suboptimal in some programming languages that are used to make client side login pages,
or server side login programs.
\par
Part of the exchanged values are least significant parts of \SHA\ hashes.
These give ample proof of having the right key,
but reveal nothing of the hashed value---even if the hash function were reversible.
Therefore,
the number of bits of the user and site keys must not equal the number of bits of the hash result.
\par
There are of course hash functions that produce longer hashes,
like \EMsub{SHA}{512},
but putting more than,
say,
128 bits into a key brings no more security.
\par
If this scheme is somehow flawed,
it most likely will not be because of insufficient key lengths.
As such,
128-bit keys should be considered the maximum practical key length.
