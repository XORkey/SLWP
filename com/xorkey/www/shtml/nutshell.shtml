<!DOCTYPE html>
<html>
	<head>
<!--#include virtual="inc/head.html" -->
		<noscript>
			<style>
				DIV#content { display: none; }
			</style>
		</noscript>
		<title>XORkey</title>
	</head>
	<body>
		<div id='wrapper'>
			<div id='top'>
<!--#include virtual="inc/top.html" -->
			</div>	<!-- #top -->
			<div id='left'>
<!--#include virtual="inc/left.html" -->
			</div>	<!-- #left -->
			<div id='right'>
<!--#include virtual="inc/right.html" -->
			</div>	<!-- #right -->
			<div id='content'>
				<section>
					<header>
						<h1>SLWP in a nutshell</h1>
					</header>
					<article>
						<header>
							<h2>Indicating which account you want to login to</h2>
						</header>
						<p>	Instead of a simple username, a hash value is computed to indicate which account you want to use.
							This value consists of a combination of the hashes of the primary key of your keyring
							(<i>K<sub>0</sub></i>)
							and the combination of the username and URL of the website.
							This value is sent to the website to lookup your site key;
							the key that is used by the website to try to log you in.</p>
					</article>
					<article>
						<header>
							<h2>The keyring</h2>
						</header>
						<p>	The keyring is the thing you have to have with you, otherwise you cannot login.
							It is the storage of all your personal login keys,
							with which you can authenticate yourself.</p>
						<p>	Each key is stored on the keyring as a 128-bit number,
							although keys themselves might be actually be constructed of fewer bits;
							the remaining bits are random in that case.
							The first key
							(<i>K<sub>0</sub></i>)
							is the keyring identifier and used to construct the initial identifying hash value.</p>
					</article>
					<article>
						<header>
							<h2>The authentication procedure</h2>
						</header>
						<p>	The login protocol is a two-way authentication procedure,
							by which the user proves to the website that it has access to the user key that was issued to him,
							and the website proves to the user that its key is the same as the key when applying for this account...
							The protocol uses random values (nonces) and several keys, so it may dazzle you at first sight.</p>
						<p>	The user generates a random value (nonce 1 or <i>R<sub>u</sub></i>) and (automatically) selects a key from the keyring that uniquely belongs to the website.
							The encryption of <i>R<sub>u</sub></i> with the selected key gives the first authentication value <i>A<sub>u</sub></i>,
							which the website needs to decrypt,
							with the help of a login server.</p>
						<p>
							The web server will try to find a key for the user (<i>K<sub>s</sub></i>),
							by selecting it with  <i>U<sub>h</sub></i>,
							and relay this key and <i>A<sub>u</sub></i> to the login server.
							The login server will generate a different random value (nonce 2 or <i>R<sub>s</sub></i>) on behalf of the webserver,
							which it will encrypt with key <i>K<sub>s</sub></i> by first transforming it into <i>K<sub>u</sub></i>, that is, the key the user has.
							The login server is the only place the secret keys live that encrypt keys like <i>K<sub>s</sub></i> into <i>K<sub>u</sub></i>.
							The encryption of <i>R<sub>s</sub></i> with <i>K<sub>u</sub></i> is the second authentication value <i>B<sub>s</sub></i>,
							which the user must decrypt.</p>
						<p>	The user can decrypt <i>B<sub>s</sub></i> with the selected key from the keyring.
							It now knows both nonces, and will send the XOR of both values to the webserver.
							The webserver got this value from the login server beforehand, so all it needs is compare the two values and see if they match.
							The login server can decrypt <i>A<sub>u</sub></i> with the found key from the database.
							The login server returns the hash of the random value <i>R<sub>u</sub></i> to the website, which is relayed to the user and proves that the website is legitimate.</p>
					</article>
					<article>
						<header>
							<h2>The login server</h2>
						</header>
						<p>	The login server is at the core of the implementation of SLWP.
							It performs the main calculations of the protocol,
							and safely stores the keys that are used to compute the values.</p>
						<p>	Although the webserver itself may be also configured to be its own login server,
							this server is typically located elsewhere.
							Either a different server in the back-office network,
							but most likely a server on the Internet.
							A typical setup would have more than one login server,
							for redundancy and scalability reasons.</p>
						<p>	Webservers are connected to login servers through dedicated IPsec VPNs.
							A small website may have as few as two login servers;
							large sites may require a lot more,
							located accross the globe to increase robustness.
							Then again,
							login servers may serve many webservers,
							in a mesh fashion.
					</article>
				</section>
			</div>	<!-- #content -->
		</div>	<!-- #wrapper -->
		<div id='bottom'>
<!--#include virtual="inc/bottom.html" -->
		</div>	<!-- #bottom -->
	</body>
</html>
